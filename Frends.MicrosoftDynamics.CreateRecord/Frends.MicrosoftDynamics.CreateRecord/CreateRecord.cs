using Frends.MicrosoftDynamics.CreateRecord.Definitions;
using Microsoft.PowerPlatform.Dataverse.Client;
using Microsoft.PowerPlatform.Dataverse.Client.Utils;
using Microsoft.Xrm.Sdk;
using System;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;

namespace Frends.MicrosoftDynamics.CreateRecord;

/// <summary>
/// MicrosoftDynamics Task.
/// </summary>
public class MicrosoftDynamics
{
    /// <summary>
    /// Create record to Microsoft Dynamics 365.
    /// [Documentation](https://tasks.frends.com/tasks/frends-tasks/Frends.MicrosoftDynamics.CreateRecord)
    /// </summary>
    /// <param name="input">Input parameters</param>
    /// <param name="options">Optional parameters</param>
    /// <param name="cancellationToken">Token generated by Frends to stop this Task.</param>
    /// <returns>Object { bool Success, string EntityId, string ErrorMessage }</returns>
    public static async Task<Result> CreateRecord([PropertyTab] Input input, [PropertyTab] Options options, CancellationToken cancellationToken)
    {
        try
        {
            using var svc = new ServiceClient(input.ConnectionString);
            svc.MaxRetryCount = options.MaxRetryCount;
            svc.RetryPauseTime = TimeSpan.FromSeconds(options.RetryPauseTime);

            if (svc.IsReady)
            {
                var entity = new Entity(input.EntityLogicalName);

                foreach (var param in input.Parameters)
                    entity[param.Name] = param.Value;

                var entityId = await svc.CreateAsync(entity, cancellationToken);

                return new Result(true, entityId.ToString(), null);
            }
            else
            {
                if (options.ThrowOnException)
                    throw new Exception($"Failed to connect to Dynamics 365. Retry count: {options.MaxRetryCount}.");
                else
                    return new Result(false, null, $"Failed to connect to Dynamics 365. Retry count: {options.MaxRetryCount}.");
            }
        }
        catch (DataverseOperationException ex)
        {
            if (options.ThrowOnException)
                throw new DataverseOperationException(ex.Message, ex.InnerException);
            else
                return new Result(false, null, ex.Message);
        }
        catch (Exception ex)
        {
            if (options.ThrowOnException)
                throw new Exception(ex.Message, ex.InnerException);
            else
                return new Result(false, null, ex.Message);
        }
    }
}